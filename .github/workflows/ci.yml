name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        shell: [bash, zsh]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup shell
      run: |
        if [ "${{ matrix.shell }}" = "zsh" ]; then
          echo "SHELL=/bin/zsh" >> $GITHUB_ENV
        else
          echo "SHELL=/bin/bash" >> $GITHUB_ENV
        fi

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y curl
        # Install pup for HTML parsing
        curl -L https://github.com/ericchiang/pup/releases/download/v0.4.0/pup_v0.4.0_linux_amd64.tar.gz | tar xz
        sudo mv pup /usr/local/bin/
        sudo chmod +x /usr/local/bin/pup

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Install Homebrew if not available
        if ! command -v brew &> /dev/null; then
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
        brew install curl pup

    - name: Make scripts executable
      run: chmod +x *.sh

    - name: Test requirements script
      run: |
        $SHELL requirements.sh
        echo "Requirements check completed"

    - name: Test script syntax
      run: |
        for script in *.sh; do
          echo "Checking syntax for $script"
          $SHELL -n "$script"
        done

    - name: Test master script help
      run: |
        # Test that the master script can be executed without errors
        echo "4" | $SHELL master_lotto.sh || true

    - name: Check file permissions
      run: |
        ls -la *.sh
        for script in *.sh; do
          if [ ! -x "$script" ]; then
            echo "Error: $script is not executable"
            exit 1
          fi
        done

    - name: Validate CSV format (if files exist)
      run: |
        if [ -f "winning_numbers.csv" ]; then
          echo "Validating winning_numbers.csv format..."
          head -5 winning_numbers.csv
        fi
        if [ -f "supplementary_numbers.csv" ]; then
          echo "Validating supplementary_numbers.csv format..."
          head -5 supplementary_numbers.csv
        fi

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install shellcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck

    - name: Lint shell scripts
      run: |
        for script in *.sh; do
          echo "Linting $script"
          shellcheck "$script" || echo "ShellCheck warnings found in $script"
        done

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check documentation files
      run: |
        # Check if required documentation files exist
        required_files=("README.md" "LICENSE" "CONTRIBUTING.md" "CHANGELOG.md")
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "Error: Required documentation file $file is missing"
            exit 1
          else
            echo "âœ“ Found $file"
          fi
        done

    - name: Validate README links
      run: |
        # Basic check for common README issues
        if ! grep -q "## " README.md; then
          echo "Warning: README.md may be missing proper section headers"
        fi
        if ! grep -q "Installation" README.md; then
          echo "Warning: README.md may be missing installation instructions"
        fi

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Security scan
      run: |
        # Check for common security issues
        echo "Checking for potential security issues..."
        
        # Check for hardcoded credentials
        if grep -r "password\|secret\|key\|token" . --exclude-dir=.git --exclude=*.md; then
          echo "Warning: Potential hardcoded credentials found"
        fi
        
        # Check file permissions
        for script in *.sh; do
          if [ -f "$script" ]; then
            perms=$(stat -c "%a" "$script")
            if [ "$perms" != "755" ] && [ "$perms" != "750" ]; then
              echo "Warning: $script has unusual permissions: $perms"
            fi
          fi
        done

  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create release archive
      run: |
        # Create a release archive
        tar -czf saturday-tatts-lotto-scraper.tar.gz \
          --exclude='.git' \
          --exclude='*.tar.gz' \
          --exclude='*.zip' \
          .
        echo "Release archive created: saturday-tatts-lotto-scraper.tar.gz"

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: saturday-tatts-lotto-scraper-${{ github.sha }}
        path: saturday-tatts-lotto-scraper.tar.gz 